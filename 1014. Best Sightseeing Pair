/*
给定正整数数组 A，A[i] 表示第 i 个观光景点的评分，并且两个景点 i 和 j 之间的距离为 j - i。

一对景点（i < j）组成的观光组合的得分为（A[i] + A[j] + i - j）：景点的评分之和减去它们两者之间的距离。

返回一对观光景点能取得的最高分。

输入：[8,1,5,2,6]
输出：11
解释：i = 0, j = 2, A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11
*/

DP method 1:
class Solution1 {
    public int maxScoreSightseeingPair(int[] A) {
        int length = A.length;
        if(A.length <=0 ){
            return 0;
        }
        int curMax = A[0];
        int max = 0;
        int index = max;
        for(int i = 0 ; i < A.length; i ++ ){
            index--;
            curMax = index + A[i];
            if(curMax > max){
                max = curMax;
            }
            if(index < A[i]){
                index = A[i];
            }
        }
        return max;
    }
}


Greedy Method: 

class Solution2 {
    public int maxScoreSightseeingPair(int[] A) {
        int record = A[0];
        int max = Integer.MIN_VALUE;
        for(int i = 1 ; i < A.length ; i ++ ){
            max = Math.max(A[i] - i + record, max);
            record = Math.max(A[i] + i, record );

        }
        return max;
    }
}



